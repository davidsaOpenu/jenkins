pipeline {
    agent any

    triggers {
        gerrit(
            customUrl: '',
            gerritProjects: [[
                branches: [[
                    compareType: 'PLAIN', 
                    pattern: "${params.GERRIT_BRANCH}" 
                ]],
                compareType: 'PLAIN',
                disableStrictForbiddenFileVerification: false,
                pattern: 'davidsaOpenu/simulator'
            ]],
            serverName: 'review.gerrithub.io',
            triggerOnEvents: [
                patchsetCreated(
                    excludeDrafts: true,
                    excludeTrivialRebase: true,
                    excludeNoCodeChange: true,
                    excludeWip: true
                ),
                draftPublished(),
                changeMerged(),
                changeRestored(),
                commentAddedContains(
                    '(?i)^(Patch Set [0-9]+:)?( [\\w\\\\+-]*)*' + 
                    '(\\n\\n)?\\s*(recheck)'
                )
            ]
        )
        cron('@daily')
    }

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: '14', 
                numToKeepStr: '24'
            )
        )
        timeout(time: 220, unit: 'MINUTES')
        timestamps()
        disableConcurrentBuilds()
    }

    parameters {
        string(
            name: 'GERRIT_REFSPEC', 
            defaultValue: 'refs/heads/master', 
            description: ''
        )
        string(
            name: 'GERRIT_BRANCH', 
            defaultValue: 'master', 
            description: ''
        )
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    def repos = [
                        [
                            dir: 'simulator', 
                            branch: params.GERRIT_BRANCH,
                            url: 'https://review.gerrithub.io/davidsaOpenu/simulator',
                            useSubmodules: true
                        ],
                        [
                            dir: 'nvme-cli', 
                            branch: 'master', 
                            url: 'https://review.gerrithub.io/davidsaOpenu/nvme-cli'
                        ],
                        [
                            dir: 'kernel', 
                            branch: 'master', 
                            url: 'https://review.gerrithub.io/davidsaOpenu/kernel',
                            timeout: 20
                        ],
                        [
                            dir: 'qemu', 
                            branch: 'master', 
                            url: 'https://review.gerrithub.io/davidsaOpenu/qemu'
                        ],
                        [
                            dir: 'nvmeCompl/tnvme', 
                            branch: 'rev-1.2',
                            url: 'https://review.gerrithub.io/davidsaOpenu/tnvme'
                        ],
                        [
                            dir: 'nvmeCompl/dnvme', 
                            branch: 'master', 
                            url: 'https://review.gerrithub.io/davidsaOpenu/dnvme'
                        ],
                        [
                            dir: 'open-osd',
                            branch: 'master',
                            url: 'https://review.gerrithub.io/davidsaOpenu/open-osd'
                        ],

                    ]

                    sh "ls; rm -rf *; ls"
                    for (repo in repos) {
/*
                        checkout(scmGit(
                            branches: [[name: repo.branch]],
                            extensions: [
                                [$class: 'RelativeTargetDirectory', relativeTargetDir: repo.dir],
                                cleanBeforeCheckout(deleteUntrackedNestedRepositories: true),
                                [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']],
                                [$class: 'CheckoutOption', timeout: (repo.dir == 'kernel' ? repo.timeout : 20)],
                                [$class: 'SubmoduleOption', recursiveSubmodules: (repo.dir == 'simulator' ? true : false)],
                            ],
                            userRemoteConfigs: [
                                [refspec: (repo.dir == 'simulator' ? params.GERRIT_REFSPEC : 'refs/heads/master'),
                                 url: repo.url]
                            ]
                        ))
*/


                        if (repo.dir == 'simulator') {
                            checkout(scmGit(
                                branches: [[name: repo.branch]],
                                extensions: [
                                    [$class: 'RelativeTargetDirectory', relativeTargetDir: repo.dir],
                                    [$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']],
                                    [$class: 'SubmoduleOption', recursiveSubmodules: true],  // Always true for simulator
                                    [$class: 'CloneOption', timeout: 20],
                                ],
                                userRemoteConfigs: [
                                    [refspec: params.GERRIT_REFSPEC,  // Specific to simulator
                                     url: repo.url]
                                ]
                            ))
                        } else {
                            checkout(scmGit(
                                branches: [[name: repo.branch]],
                                extensions: [
                                    [$class: 'RelativeTargetDirectory', relativeTargetDir: repo.dir],
                                    [$class: 'CloneOption', timeout: 20],
                                    [$class: 'SubmoduleOption', recursiveSubmodules: false],  // False for non-simulator
                                ],
                                userRemoteConfigs: [
                                    [url: repo.url]  // No refspec for non-simulator
                                ]
                            ))
                        }


                    }
                }
            }
        }

        stage('Handle Depend-On') {
           steps {
                script {
                    dir('simulator/infra/builder') {
                        if (env.GERRIT_CHANGE_NUMBER) {
                            sh "./handle-depend-on-instructions.sh '${WORKSPACE}' ${env.GERRIT_CHANGE_NUMBER} davidsaOpenu gerrit"
                        } else {
                            sh 'echo Periodic run - no need for ./handle-depend-on-instructions.sh'
                        }
                    }
                }
            }
        }
        
        stage('Build and Test') {
            steps {
                dir('simulator/infra/builder'){
                    sh './run-ci.sh'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir('simulator') {
                        sh 'echo Deploy - TBD'
                    }
                }
            }
        }
    }
}

